---
// src/components/ChatbotButton.astro
---

<button id="chatbotTrigger" class="fixed bottom-4 right-4 bg-blue-500 hover:bg-blue-600 text-white rounded-full p-4 shadow-lg z-50 transition-all duration-300">
  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-4l-4 4z" />
  </svg>
</button>

<div id="chatbotModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
  <div class="fixed inset-4 md:inset-10 bg-white rounded-lg shadow-xl flex flex-col">
    <div class="absolute top-4 right-4">
      <button id="closeChatbot" class="text-gray-500 hover:text-gray-700">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <div id="chatbotContainer" class="flex-1 overflow-auto p-4">
      <!-- Le chatbot sera injecté ici -->
    </div>
  </div>
</div>

<script>
  let hasInitialized = false;

  function initializeChatbot() {
    if (hasInitialized) return;

    const elements = {
      trigger: document.getElementById('chatbotTrigger'),
      modal: document.getElementById('chatbotModal'),
      closeButton: document.getElementById('closeChatbot'),
      container: document.getElementById('chatbotContainer')
    };

    // Vérifier que tous les éléments sont présents
    const missingElements = Object.entries(elements)
      .filter(([_, element]) => !element)
      .map(([name]) => name);

    if (missingElements.length > 0) {
      console.error(`Éléments manquants : ${missingElements.join(', ')}`);
      return;
    }

    const { trigger, modal, closeButton, container } = elements;

    async function openChatbot() {
      modal.classList.remove('hidden');
      if (!hasInitialized) {
        await initReact();
        hasInitialized = true;
      }
    }

    function closeChatbot() {
      modal.classList.add('hidden');
    }

    async function initReact() {
      try {
        const React = await import('react');
        const ReactDOM = await import('react-dom/client');
        const { default: ClosetChatbot } = await import('../components/ClosetChatbot');
        
        const root = ReactDOM.createRoot(container);
        root.render(React.createElement(ClosetChatbot));
      } catch (error) {
        console.error('Erreur lors de l\'initialisation de React:', error);
        console.error('Détails de l\'erreur:', error.message);
      }
    }

    // Ajouter les écouteurs d'événements
    trigger.addEventListener('click', openChatbot);
    closeButton.addEventListener('click', closeChatbot);
    modal.addEventListener('click', (e) => {
      if (e.target === modal) closeChatbot();
    });
  }

  // Initialiser lors du chargement de la page
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeChatbot);
  } else {
    initializeChatbot();
  }

  // Support pour Astro View Transitions
  document.addEventListener('astro:page-load', initializeChatbot);
</script>